# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ about this file                                                            ║
# ╚════════════════════════════════════════════════════════════════════════════╝

# zshenv is always sourced. It often contains exported variables that should be available to other 
# programs. For example, $PATH, $EDITOR, and $PAGER are often set in .zshenv. Also, you can set 
# $ZDOTDIR in .zshenv to specify an alternative location for the rest of your zsh configuration.

# load order: 
#   .zshenv                         → 
#   .zprofile   (if login)          → 
#   .zshrc      (if interactive)    → 
#   .zlogin     (if login)          → 
#   .zlogout    (sometimes)


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ functions                                                                  ║
# ╚════════════════════════════════════════════════════════════════════════════╝

get_dotfiles_path() {
    local this_file="$(realpath "${(%):-%x}")"

    local dots="$(realpath "$(dirname "$this_file")")"
    if [[ "$(basename "$dots")" != "dots" ]]; then 
        return 1
    fi

    local zsh="$(dirname "$dots")"
    if [[ "$(basename "$zsh")" != "zsh" ]]; then 
        return 1
    fi

    local dotfiles="$(dirname "$zsh")"
    if [[ "$(basename "$dotfiles")" != "dotfiles" ]]; then 
        return 1
    fi

    echo "$(realpath "$dotfiles")"
}


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ environment                                                                ║
# ╚════════════════════════════════════════════════════════════════════════════╝

# NOTE: on $PATH
# - prepending $PATH: assures that the system looks in this custom path *after* 
#   searching default locations first.
# - appending :$PATH assures that the system looks in this custom path *before* 
#   searching default locations.

export XDG_CONFIG_HOME="$HOME/.config"

if [[ "$(uname)" == "Linux" ]]; then
    export BROWSER="zen-browser"
elif [[ "$(uname)" == "Darwin" ]]; then
    export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox"
fi
export EDITOR='nvim'
export DOTFILES="$(get_dotfiles_path)"


# my bin repo
if [[ -d "$HOME/bin/src" ]] || [[ -L "$HOME/bin/src" ]]; then
    export REWGS_BIN="$HOME/bin/src"
    if [[ $(uname) == "Darwin" ]]; then
        export PATH=$PATH:$(find "$REWGS_BIN" -type d | paste -sd ":" -)
    elif [[ $(uname) == "Linux" ]]; then
        export PATH=$PATH:$(find "$REWGS_BIN" -type d | paste -sd ":" -)
    fi
fi

# other user bin directories
export PATH="$HOME/.local/bin:$PATH"
export PATH="/usr/local/bin:$PATH"


# broot
if [[ -d "$XDG_CONFIG_HOME/broot" ]]; then
    export PATH="$XDG_CONFIG_HOME/broot/launcher/bash:$PATH"
fi


# flutter
export PATH="$HOME/src/flutter/bin:$PATH"


# golang
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
export PATH="$GOPATH:$PATH"
export PATH="$GOBIN:$PATH"


# homebrew
if [[ $(uname) == "Darwin" ]]; then
    export PATH="$PATH:/opt/homebrew/bin"
    export PATH="$PATH:/opt/homebrew/sbin"
    export PATH="$PATH:/opt/homebrew/Cellar"
fi

HOMEBREW_NO_ENV_HINTS=1
# Prevents homebrew from automatically updating all packages when installing a package.
HOMEBREW_NO_AUTO_UPDATE=1


# jetbrains
if [[ $(uname) == "Darwin" ]]; then
    export PATH="$HOME/Library/Application Support/JetBrains/Toolbox/scripts:$PATH"
elif [[ $(uname) == "Linux" ]]; then
    export PATH="$HOME/opt/JetBrains:$PATH"
fi


# nim
export PATH="$PATH:$HOME/.nimble/bin"


# Added by OrbStack: command-line tools and integration
if [[ $(uname) == "Darwin" ]]; then
    source ~/.orbstack/shell/init.zsh 2>/dev/null || :
fi


# pyenv
if [[ -d "$HOME/.pyenv" ]]; then
    # This checks if the current shell is being run via WSL.
    # On a machine that has pyenv-win installed on the Windows side, as this 
    # messes with the usual $PYENV_ROOT and tries to run `eval "$(pyenv init -)"` 
    # in `/mnt/c/Users/"$(whoami)"/.pyenv` and thus returns a `bad interpreter` 
    # error.
    if [[ $(uname) == "Linux" ]] && [[ $(grep -i Microsoft /proc/version) ]]; then
        export PYENV_ROOT="/home/"$(whoami)"/.pyenv"
        # NOTE: Not sure if these two lines are needed, due to the lines below?
        # export PATH="$PYENV_ROOT/bin:$PATH"
        # eval "$(pyenv init -)"
    else
        # All other cases (macOS, non-WSL Linux, etc)
        export PYENV_ROOT="$HOME/.pyenv"
    fi
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
fi


# poetry
if [[ -d "HOME/.poetry" ]] || [[ -L "$HOME/.poetry" ]]; then
    export PATH="$PATH:$HOME/.poetry/bin"
fi


# reaper
if [[ $(uname) == "Darwin" ]]; then
    alias reaper_exec="/Applications/REAPER.app/Contents/MacOS/REAPER"
    alias REAPER="cd $HOME/Library/Application\ Support/REAPER"
    alias ReaScripts="cd $HOME/Library/Application\ Support/REAPER/Scripts"
    alias rewgsReaScripts="cd $HOME/Library/Application\ Support/REAPER/Scripts/rewgs-reaper-scripts"
elif [[ $(uname) == "Linux" ]]; then
    export PATH="$HOME/opt/REAPER:$PATH"
fi


# rust
if [[ -d "$HOME/.cargo" ]]; then
    . "$HOME/.cargo/env"
    export PATH="$HOME/.cargo/bin:$PATH"
fi
