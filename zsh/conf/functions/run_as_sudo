# source: https://unix.stackexchange.com/questions/269078/executing-a-bash-script-function-with-sudo
run_as_sudo () {
    if [[ $(uname) == "Darwin" ]]; then
        # NOTE: macOS doesn't have a `type -t`, just `type`
        if [[ $(type $1) == *function* ]]; then
            shift && command sudo bash -c "$(declare -f $1); $1 $*"
        elif [[ $(type $1) = *alias* ]]; then
            alias sudo='\sudo '

            # Ignore any editor errors along the lines of "argument mixes string and array."
            # This line expands positional parameters, i.e. "$1" "$2" ... and so on.
            # See: https://stackoverflow.com/questions/3898665/what-is-in-bash
            eval "sudo $@"
        else
            command sudo "$@"
        fi
    elif [[ $(uname) == "Linux" ]]; then
        # NOTE: `type -w` is bash's equivalent of bash's `type -t`
        if [[ $(type -w $1) = function ]]; then
            shift && command sudo bash -c "$(declare -f $1); $1 $*"
        elif [[ $(type -w $1) = alias ]]; then
            alias sudo='\sudo '
            eval "sudo $@"
        else
            command sudo "$@"
        fi
    fi
}
